// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packet/packet.proto

package packet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PacketData struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketData) Reset()         { *m = PacketData{} }
func (m *PacketData) String() string { return proto.CompactTextString(m) }
func (*PacketData) ProtoMessage()    {}
func (*PacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_57dbb8dc3dbf2351, []int{0}
}

func (m *PacketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketData.Unmarshal(m, b)
}
func (m *PacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketData.Marshal(b, m, deterministic)
}
func (m *PacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketData.Merge(m, src)
}
func (m *PacketData) XXX_Size() int {
	return xxx_messageInfo_PacketData.Size(m)
}
func (m *PacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketData.DiscardUnknown(m)
}

var xxx_messageInfo_PacketData proto.InternalMessageInfo

func (m *PacketData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PacketData) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*PacketData)(nil), "packet.PacketData")
}

func init() { proto.RegisterFile("packet/packet.proto", fileDescriptor_57dbb8dc3dbf2351) }

var fileDescriptor_57dbb8dc3dbf2351 = []byte{
	// 120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x48, 0x4c, 0xce,
	0x4e, 0x2d, 0xd1, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x92,
	0x1e, 0x17, 0x57, 0x00, 0x98, 0xe5, 0x92, 0x58, 0x92, 0x28, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0xc4, 0x94, 0x99, 0x22, 0x24, 0xc0, 0xc5, 0x9c, 0x5b, 0x9c,
	0x2e, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x1a, 0x59, 0x70, 0xb1, 0x06, 0x27, 0x56,
	0x7a, 0x64, 0x0a, 0xe9, 0x73, 0x31, 0x07, 0x27, 0x56, 0x0a, 0x09, 0xe9, 0x41, 0x8d, 0x45, 0x98,
	0x22, 0x85, 0x45, 0x4c, 0x89, 0x21, 0x89, 0x0d, 0x6c, 0xb1, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xa5, 0x6c, 0x29, 0x16, 0x8f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SayHiClient is the client API for SayHi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SayHiClient interface {
	Say(ctx context.Context, in *PacketData, opts ...grpc.CallOption) (*PacketData, error)
}

type sayHiClient struct {
	cc *grpc.ClientConn
}

func NewSayHiClient(cc *grpc.ClientConn) SayHiClient {
	return &sayHiClient{cc}
}

func (c *sayHiClient) Say(ctx context.Context, in *PacketData, opts ...grpc.CallOption) (*PacketData, error) {
	out := new(PacketData)
	err := c.cc.Invoke(ctx, "/packet.SayHi/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayHiServer is the server API for SayHi service.
type SayHiServer interface {
	Say(context.Context, *PacketData) (*PacketData, error)
}

// UnimplementedSayHiServer can be embedded to have forward compatible implementations.
type UnimplementedSayHiServer struct {
}

func (*UnimplementedSayHiServer) Say(ctx context.Context, req *PacketData) (*PacketData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterSayHiServer(s *grpc.Server, srv SayHiServer) {
	s.RegisterService(&_SayHi_serviceDesc, srv)
}

func _SayHi_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayHiServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.SayHi/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayHiServer).Say(ctx, req.(*PacketData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SayHi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packet.SayHi",
	HandlerType: (*SayHiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _SayHi_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packet/packet.proto",
}
